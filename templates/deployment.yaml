---
apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  labels:
    app: {{ template "__CHART__.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "__CHART__.fullname" . }}
spec:
  replicas: {{ default 2 .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "__CHART__.fullname" . }}
      release: "{{ .Release.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: "RollingUpdate"
  template:
    metadata:
      annotations:
        ## Only scrape pods that have a value of `true`
        prometheus.io/scrape: "{{ default "true" .Values.monitoring.pod.scrape }}"
        ## If the metrics path is not `/metrics` override this.
        prometheus.io/port: "{{ default "9102" .Values.monitoring.pod.port }}"
        ## scrape the pod on the indicated port instead of the default of `9102`.
        prometheus.io/path: "{{ default "metrics" .Values.monitoring.pod.path }}"
        ##
        ## Oftentimes, applicatins need to be restarted once once thier configuration has been updated. However,
        ## Kubernetes makes the assumption that watching the file for configuration change is the applications
        ## responsibiliy, and doesn't restart when files change. So, the lines below modify a propery that does trigger
        ## a rotation of the applications so they are restarted when their dependencies change.
        ##
        ## See https://github.com/kubernetes/helm/blob/master/docs/charts_tips_and_tricks.md
        ##   #automatically-roll-deployments-when-configmaps-or-secrets-change
        ##
        # checksum/config: {{ include (print $.Chart.Name "/templates/secret.yaml") . | sha256sum }}
        # checksum/config: {{ include (print $.Chart.Name "/templates/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ template "__CHART__.fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      ## Volumes are how Kubernetes expresses either networked storage or other metadata in the filesystem. There are
      ## storage types, the most useful of which are illustrated below. Remember to uncomment the volumes: node if you
      ## decide to use them!
      ##
      # volumes:
      ##
      ## EMPTY DIR - Useful for scratch space, such as for CI
      ##
      #   - name: "__VOLUME_NAME__"
      #     emptyDir: {}
      ##
      ## HOST PATH - Useful when mounting some host proprty into hte container
      ##
      #   - name: "__VOLUME_NAME__"
      #     hostPath:
      #       path: "/path/to/your/folder"
      ##
      ## PERSISTENT VOLUME CLAIM - Useful to access network storage. Should be used in preference to GcePersistantDisk
      ##                           et. al. You will need to define a persistent volume as well, for this to work.
      ##
      #   - name: "__VOLUME_NAME__"
      #     persistentVolumeClaim:
      #       claimName: {{ template "__CHART__.pvcName" . }}
      ##
      ## CONFIGMAP
      ##
      #   - name: "__VOLUME_NAME__"
      #     configMap:
      #       name: "__CONFIGMAP_NAME__"
      ##
      ## Note: You can also use single files from a configmap, with a syntax called "subPath". An example is below:
      ##
      #   - name: "__VOLUME_NAME__"
      #     configMap:
      #       name: "__CONFIGMAP_NAME__"
      #       items:
      #         - key: "__ITEM_KEY__"
      #           path: "path/to/item"
      ##
      ## SECRET
      ##
      #   - name: "__VOLUME_NAME__"
      #     secret:
      #       secretName: "__SECRET_NAME__"
      ##
      ## DOWNWARD API
      ##
      #   - name: "__VOLUME_NAME__"
      #     downwardAPI:
      #       items:
      #         - path: "labels"
      #           fieldRef:
      #             fieldPath: metadata.labels
      #         - path: "annotations"
      #           fieldRef:
      #             fieldPath: metadata.annotations
      containers:
        - name: {{ template "__CHART__.name" }}
          ## Environment variables can be populated in a number of ways, including secrets, or just string values. Below
          ## are some examples for you to copy-paste. Remember to uncomment the `env` node!
          #
          # env:
          #
          ## An example of a simple key value pair
          #
          # - name: "FOO"
          #   value: "BAR"
          #
          ## An example of environment variables from a secret
          #
          # - name: "SECRET"
          #   valueFrom:
          #     secretKeyRef:
          #       name: __SECRET_NAME__
          #       key: __KEY_USED_IN_SECRET_NAME__
          #
          image: {{ .Values.image | quote }}
          # args:
          #   - "command"
          #   - "line"
          #   - "arguments"
          resources:
{{ toYaml .Values.resources | indent 12 }}
          securityContext:
            privileged: {{ default false .Values.securityContext.privileged }}
            # capabilities:
              # add:
                # - "SETPCAP"
                # - "SYS_MODULE"
                # - "SYS_RAWIO"
                # - "SYS_PACCT"
                # - "SYS_ADMIN"
                # - "SYS_NICE"
                # - "SYS_RESOURCE"
                # - "SYS_TIME"
                # - "SYS_TTY_CONFIG"
                # - "MKNOD"
                # - "AUDIT_WRITE"
                # - "AUDIT_CONTROL"
                # - "MAC_OVERRIDE"
                # - "MAC_ADMIN"
                # - "NET_ADMIN"
                # - "SYSLOG"
                # - "CHOWN"
                # - "NET_RAW"
                # - "DAC_OVERRIDE"
                # - "FOWNER"
                # - "DAC_READ_SEARCH"
                # - "FSETID"
                # - "KILL"
                # - "SETGID"
                # - "SETUID"
                # - "LINUX_IMMUTABLE"
                # - "NET_BIND_SERVICE"
                # - "NET_BROADCAST"
                # - "IPC_LOCK"
                # - "IPC_OWNER"
                # - "SYS_CHROOT"
                # - "SYS_PTRACE"
                # - "SYS_BOOT"
                # - "LEASE"
                # - "SETFCAP"
                # - "WAKE_ALARM"
                # - "BLOCK_SUSPEND"
          ports:
            ## The container port to expose, and how to expose it. Possible values are any valid port number. You
            ## probably want to expose your application port, though.
            ##
            ## See http://kubernetes.io/docs/api-reference/v1/definitions/#_v1_containerport
            - containerPort: __CONTAINER_PORT__
              ## What protocol the port uses. Possible values are:
              # - "TCP"
              # - "UDP"
              protocol: "__CONTAINER_PORT_PROTOCOL__"
              ## What designation to give the port. Useful later, so we can reference the port by name in the health
              ## check.
              name: "__CONTAINER_PORT_NAME__"
          # volumeMounts:
          #   - name: "webserver-etc-conf-d"
          #     readOnly: true
          #     mountPath: "/etc/webserver/conf.d"
          #   - name: "webserver-data
          #     readOnly: false
          #     mountPath: "/data"
          ## There are three types or readiness probes:
          ##
          ## More generally, a liveness probe is used to determine whether the application is "healthy" and should
          ## recieve traffic. Whereas, a readiness probe is used to determine whether the application has finished
          ## its boot and is now online
          ##
          ## - HTTP Liveness
          ## - TCP Liveness
          ## - Exec liveness
          ##
          ## Below are examples of each healthcheck type with descriptions of when to use them
          ##
          # livenessProbe:
            ##
            # tcpSocket:
            ##
            ## The "tcpSocket" health check is useful for when an application exposes a port, but there are no utilities
            ## to determine whether that application is healthy over that port. So, the fact the application is listening
            ## on that port is taken as a "proxy" health measure.
            ##
            ##
              # port: "__CONTAINER_PORT_NAME__"
              ## Number of seconds after the container has started before liveness probes are initiated.
              ## See http://kubernetes.io/docs/user-guide/pod-states#container-probes
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
              ##
            ##
            # exec:
            ##
            ## The "exec" healthcheck is useful when there is a bundled program to determine whether the application is
            ## healthy (such as "mysqladmin ping"). It is also useful if the application does not open a network port
            ## for communicating with other applications, but still represents its state on disk somehow.
            ##
              ## The command executed by exec is expected to return "0" to indicate healthy, and any nonzero status code
              ## to indicate unhealthy.
              # command:
                # - cat
                # - /tmp/healthy
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
            ##
            # httpGet
            #
            ## As the name implies, the "httpGet" health check places a HTTP GET request to an endpoint defined by the
            ## the application. It seems to be the superior method of health checking where the application supports
            ## HTTP, as the semantics are known and usually reliable.
            ##
              ## The path that the HTTP GET request will be made to. Any code > 200 and < 400 is OK. Any other code is
              ## not OK
              ##
              # path: /healthz
              ##
              ## If the application exposes the health checking port on a non standard port, indicate here. Otherwise,
              ## use a named application port defined above.
              ##
              # port: "__CONTAINER_PORT_NAME__"
              ##
              ## Additional HTTP headers can be supplied to the HTTP health check to modify the behaviour, such as to
              ## supply a HOST header.
              ##
              # httpHeaders:
                # - name: "X-Custom-Header"
                #   value: "Awesome"
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
          ## The Readiness probe follows exactly the same syntax as the liveness probe, and the examples above can
          ## be reused.
          ##
          # readinessProbe:
          ##
          ## __LIVENESS_PROBE__
      ## Whether to restart this pod. Possible values are:
      ## - Always (Sensible Default)
      ## - OnFailure
      ## - Never
      ##
      ## For more information, see http://kubernetes.io/docs/user-guide/pod-states/#restartpolicy
      restartPolicy: "__RESTART_POLICY__"
      securityContext:
        ## Volumes which support ownership management are modified to be owned and writable by the GID specified in
        ## fsGroup. See the Ownership Management design document for more details.
        ## See: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/
        ##      volume-ownership-management.md
        # fsGroup: 1000
        ## A list of groups applied to the first process run in each container, in addition to the container’s primary
        ## GID. If unspecified, no groups will be added to any container.
        # supplementalGroups: [1000]
