---
apiVersion: "extensions/v1beta1"
kind: "DaemonSet"
metadata:
  labels:
    app: {{ template "__CHART__.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "__CHART__.fullname" . }}
spec:
  template:
    metadata:
      annotations:
        ## Only scrape pods that have a value of `true`
        prometheus.io/scrape: "{{ default "true" .Values.monitoring.pod.scrape }}"
        ## scrape the pod on the indicated port instead of the default of `9102`.
        prometheus.io/port: "{{ default "9102" | .Values.monitoring.pod.port }}"
        ## If the metrics path is not `/metrics` override this.
        prometheus.io/path: "{{ default "/metrics" .Values.monitoring.pod.path | quote }}"
        ## Oftentimes, applicatins need to be restarted once once thier configuration has been updated. However,
        ## Kubernetes makes the assumption that watching the file for configuration change is the applications
        ## responsibiliy, and doesn't restart when files change. So, the lines below modify a propery that does trigger
        ## a rotation of the applications so they are restarted when their dependencies change.
        ##
        ## See https://github.com/kubernetes/helm/blob/master/docs/charts_tips_and_tricks.md
        ##   #automatically-roll-deployments-when-configmaps-or-secrets-change
        ##
        # checksum/config: {{ include (print $.Chart.Name "/templates/secret.yaml") . | sha256sum }}
        # checksum/config: {{ include (print $.Chart.Name "/templates/configmap.yaml") . | sha256sum }}
      labels:
        application: "node-exporter"
        role: "metrics"
        version: "1.0.0"
    spec:
      # volumes:
      #   - name: "nodeexporter-etc-conf-d"
      # configMap:
      #   - name: "nodeexporter-data"
      #     hostPath:
      #       path: /data/nodeexporter/
      hostNetwork: true
      hostPID: true
      containers:
        - name: {{ template "__CHART__.name" }}
          # env:
          # - name: "FOO"
          #   value: "BAR"
          image: "__IMAGE__" # Todo: Update this
          resources:
{{ toYaml .Values.resources | indent 12 }}
          # args:
          #   - "command"
          #   - "line"
          #   - "arguments"
          ports:
            - containerPort: __CONTAINER_PORT__
              protocol: "__CONTAINER_PORT_PROTOCOL__"
              hostPort: __CONTAINER_PORT__
              name: "__CONTAINER_PORT_NAME__"
          # volumeMounts:
          #   - name: "nodeexporter-etc-conf-d"
          #     readOnly: true
          #     mountPath: "/etc/nodeexporter/conf.d"
          #   - name: "nodeexporter-data
          #     readOnly: false
          #     mountPath: "/data"
          ## There are three types or readiness probes:
          ##
          ## More generally, a liveness probe is used to determine whether the application is "healthy" and should
          ## recieve traffic. Whereas, a readiness probe is used to determine whether the application has finished
          ## its boot and is now online
          ##
          ## - HTTP Liveness
          ## - TCP Liveness
          ## - Exec liveness
          ##
          ## Below are examples of each healthcheck type with descriptions of when to use them
          ##
          # livenessProbe:
            ##
            # tcpSocket:
            ##
            ## The "tcpSocket" health check is useful for when an application exposes a port, but there are no utilities
            ## to determine whether that application is healthy over that port. So, the fact the application is listening
            ## on that port is taken as a "proxy" health measure.
            ##
            ##
              # port: "__CONTAINER_PORT_NAME__"
              ## Number of seconds after the container has started before liveness probes are initiated.
              ## See http://kubernetes.io/docs/user-guide/pod-states#container-probes
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
              ##
            ##
            # exec:
            ##
            ## The "exec" healthcheck is useful when there is a bundled program to determine whether the application is
            ## healthy (such as "mysqladmin ping"). It is also useful if the application does not open a network port
            ## for communicating with other applications, but still represents its state on disk somehow.
            ##
              ## The command executed by exec is expected to return "0" to indicate healthy, and any nonzero status code
              ## to indicate unhealthy.
              # command:
                # - cat
                # - /tmp/healthy
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
            ##
            # httpGet
            #
            ## As the name implies, the "httpGet" health check places a HTTP GET request to an endpoint defined by the
            ## the application. It seems to be the superior method of health checking where the application supports
            ## HTTP, as the semantics are known and usually reliable.
            ##
              ## The path that the HTTP GET request will be made to. Any code > 200 and < 400 is OK. Any other code is
              ## not OK
              ##
              # path: /healthz
              ##
              ## If the application exposes the health checking port on a non standard port, indicate here. Otherwise,
              ## use a named application port defined above.
              ##
              # port: "__CONTAINER_PORT_NAME__"
              ##
              ## Additional HTTP headers can be supplied to the HTTP health check to modify the behaviour, such as to
              ## supply a HOST header.
              ##
              # httpHeaders:
                # - name: "X-Custom-Header"
                #   value: "Awesome"
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
          ## The Readiness probe follows exactly the same syntax as the liveness probe, and the examples above can
          ## be reused.
          ##
          # readinessProbe:
          ##
          ## __LIVENESS_PROBE__
      restartPolicy: "Always"
      securityContext: {}
