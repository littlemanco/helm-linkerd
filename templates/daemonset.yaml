---
apiVersion: "extensions/v1beta1"
kind: "DaemonSet"
metadata:
  labels:
    app: {{ template "linkerd.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "linkerd.fullname" . }}
spec:
  template:
    metadata:
      annotations:
        ## Oftentimes, applicatins need to be restarted once once thier configuration has been updated. However,
        ## Kubernetes makes the assumption that watching the file for configuration change is the applications
        ## responsibiliy, and doesn't restart when files change. So, the lines below modify a propery that does trigger
        ## a rotation of the applications so they are restarted when their dependencies change.
        ##
        ## See https://github.com/kubernetes/helm/blob/master/docs/charts_tips_and_tricks.md
        ##   #automatically-roll-deployments-when-configmaps-or-secrets-change
        ##
        # checksum/config: {{ include (print $.Chart.Name "/templates/secret.yaml") . | sha256sum }}
        # checksum/config: {{ include (print $.Chart.Name "/templates/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ template "linkerd.fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      ## Volumes are how Kubernetes expresses either networked storage or other metadata in the filesystem. There are
      ## storage types, the most useful of which are illustrated below. Remember to uncomment the volumes: node if you
      ## decide to use them!
      ##
      # volumes:
      ##
      ## EMPTY DIR - Useful for scratch space, such as for CI
      ##
      #   - name: "__VOLUME_NAME__"
      #     emptyDir: {}
      ##
      ## HOST PATH - Useful when mounting some host proprty into hte container
      ##
      #   - name: "__VOLUME_NAME__"
      #     hostPath:
      #       path: "/path/to/your/folder"
      ##
      ## PERSISTENT VOLUME CLAIM - Useful to access network storage. Should be used in preference to GcePersistantDisk
      ##                           et. al. You will need to define a persistent volume as well, for this to work.
      ##
      #   - name: "__VOLUME_NAME__"
      #     persistentVolumeClaim:
      #       claimName: {{ template "linkerd.pvcName" . }}
      ##
      ## CONFIGMAP
      ##
      #   - name: "__VOLUME_NAME__"
      #     configMap:
      #       name: "__CONFIGMAP_NAME__"
      ##
      ## Note: You can also use single files from a configmap, with a syntax called "subPath". An example is below:
      ##
      #   - name: "__VOLUME_NAME__"
      #     configMap:
      #       name: "__CONFIGMAP_NAME__"
      #       items:
      #         - key: "__ITEM_KEY__"
      #           path: "path/to/item"
      ##
      ## SECRET
      ##
      #   - name: "__VOLUME_NAME__"
      #     secret:
      #       secretName: "__SECRET_NAME__"
      ##
      ## DOWNWARD API
      ##
      #   - name: "__VOLUME_NAME__"
      #     downwardAPI:
      #       items:
      #         - path: "labels"
      #           fieldRef:
      #             fieldPath: metadata.labels
      #         - path: "annotations"
      #           fieldRef:
      #             fieldPath: metadata.annotations
      hostNetwork: {{ default false .Values.pod.hostNetwork }}
      hostPID: {{ default false .Values.pod.hostPID }}
      containers:
        - name: {{ template "linkerd.name" }}
          env:
            - name: "POD_IP"
              valueFrom:
                fieldRef:
                  fieldPath: "status.podIP"
          image: {{ .Values.pod.image | quote }}
          # args:
          #   - "command"
          #   - "line"
          #   - "arguments"
          resources:
{{ toYaml .Values.resources | indent 12 }}
          ports:
            - containerPort: 4141
              hostPort: 4141
              protocol: "TCP"
              name: "Incoming"
            - containerPort: 4140
              hostPort: 4140
              protocol: "TCP"
              name: "Outgoing"
            - containerPort: 9990
              hostPort: 9990
              protocol: "TCP"
              name: "Admin"
          # volumeMounts:
          #   - name: "nodeexporter-etc-conf-d"
          #     readOnly: true
          #     mountPath: "/etc/nodeexporter/conf.d"
          #   - name: "nodeexporter-data
          #     readOnly: false
          #     mountPath: "/data"
          ## There are three types or readiness probes:
          ##
          ## More generally, a liveness probe is used to determine whether the application is "healthy" and should
          ## recieve traffic. Whereas, a readiness probe is used to determine whether the application has finished
          ## its boot and is now online
          ##
          ## - HTTP Liveness
          ## - TCP Liveness
          ## - Exec liveness
          ##
          ## Below are examples of each healthcheck type with descriptions of when to use them
          ##
          # livenessProbe:
            ##
            # tcpSocket:
            ##
            ## The "tcpSocket" health check is useful for when an application exposes a port, but there are no utilities
            ## to determine whether that application is healthy over that port. So, the fact the application is listening
            ## on that port is taken as a "proxy" health measure.
            ##
            ##
              # port: "__CONTAINER_PORT_NAME__"
              ## Number of seconds after the container has started before liveness probes are initiated.
              ## See http://kubernetes.io/docs/user-guide/pod-states#container-probes
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
              ##
            ##
            # exec:
            ##
            ## The "exec" healthcheck is useful when there is a bundled program to determine whether the application is
            ## healthy (such as "mysqladmin ping"). It is also useful if the application does not open a network port
            ## for communicating with other applications, but still represents its state on disk somehow.
            ##
              ## The command executed by exec is expected to return "0" to indicate healthy, and any nonzero status code
              ## to indicate unhealthy.
              # command:
                # - cat
                # - /tmp/healthy
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
            ##
            # httpGet
            #
            ## As the name implies, the "httpGet" health check places a HTTP GET request to an endpoint defined by the
            ## the application. It seems to be the superior method of health checking where the application supports
            ## HTTP, as the semantics are known and usually reliable.
            ##
              ## The path that the HTTP GET request will be made to. Any code > 200 and < 400 is OK. Any other code is
              ## not OK
              ##
              # path: /healthz
              ##
              ## If the application exposes the health checking port on a non standard port, indicate here. Otherwise,
              ## use a named application port defined above.
              ##
              # port: "__CONTAINER_PORT_NAME__"
              ##
              ## Additional HTTP headers can be supplied to the HTTP health check to modify the behaviour, such as to
              ## supply a HOST header.
              ##
              # httpHeaders:
                # - name: "X-Custom-Header"
                #   value: "Awesome"
              ##
              # initialDelaySeconds: 5
              ##
              ## Number of seconds after which the probe times out. Minimum value is 1
              ##
              # timeoutSeconds: 1
              ##
              ## Minimum consecutive failures for the probe to be considered failed after having succeeded.
              ## Minimum value is 1.
              ##
              # failureThreshold: 3
          ## The Readiness probe follows exactly the same syntax as the liveness probe, and the examples above can
          ## be reused.
          ##
          # readinessProbe:
          ##
          ## __LIVENESS_PROBE__
      ## See http://kubernetes.io/docs/user-guide/pod-states/#restartpolicy
      restartPolicy: "Always"
